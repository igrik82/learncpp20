/* Абстрактные классы нужны для определения общих
 * повторяющихся свойств в наследуемых классах.
 * Возможность определения общего протокола для доступа
 * к методам класса.
 * Например абстрактныййй класс человек. Каждый человек имеет
 * имя, и дочерние классы могут наследовать это свойство. Также
 * человек работает, но работа у всех разная поэтому абстрактный
 * класс предоставляет метод работы, а наследованный класс определяет
 * как именно работает человек.
 * */

#pragma once
#include <string>
#include <string_view>

class Human {
private:
  std::string _name;

public:
  // Методы общие для каждого дочернего класса
  void setName(std::string_view name);
  std::string getName() const;

  // Делаем чистую виртуальную функцию, которую каждый субкласс
  // переопределяет и обязательно должен переопределить в своем классе
  virtual std::string doWork() const = 0; // Чистая виртуальная функция

  virtual std::string introduce() const; // Виртуальная функция

  // Коструктор и деструктор
  Human(std::string_view name);
  virtual ~Human() = default;
};
